import React, { useState, useEffect } from 'react';
import { Line, Pie } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';
import { Global } from '../../../helpers/Global';
import { Peticion } from '../../../helpers/Peticion';
import { jsPDF } from 'jspdf';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);

export const AdminDashboard = () => {
  const [estadisticas, setEstadisticas] = useState({
    caba침asDisponibles: 0,
    reservasTotales: 0,
    ingresosTotales: 0,
  });
  const [caba침as, setCaba침as] = useState([]);
  const [reservasMensuales, setReservasMensuales] = useState(new Array(12).fill(0));
  const [reservasPorCaba침a, setReservasPorCaba침a] = useState([]);
  const [metodosPago, setMetodosPago] = useState({});
  const [a침osDisponibles, setA침osDisponibles] = useState([]);
  const [a침oSeleccionado, setA침oSeleccionado] = useState(new Date().getFullYear());

  useEffect(() => {
    const obtenerDatos = async () => {
      let urlCaba침as = Global.url + "cabin/getCabins";
      const { datos: caba침asData } = await Peticion(urlCaba침as, "GET", '', false, 'include');
      setCaba침as(caba침asData.cabins);

      let urlReservas = Global.url + "reservation/getAllReservations";
      const { datos: reservasData } = await Peticion(urlReservas, "GET", '', false, 'include');

      // --- obtener a침os 칰nicos ---
      const a침os = [
        ...new Set(reservasData.reservations.map(r => new Date(r.fechaInicio).getFullYear()))
      ].sort((a, b) => b - a);
      setA침osDisponibles(a침os);

      const reservasFiltradas = reservasData.reservations.filter(reserva => {
        const a침oReserva = new Date(reserva.fechaInicio).getFullYear();
        return a침oReserva === a침oSeleccionado;
      });

      const caba침asDisponibles = caba침asData.cabins.filter(c => c.estado === 'Disponible').length;
      const reservasTotales = reservasFiltradas.length;
      const ingresosTotales = reservasFiltradas.reduce((acc, r) => acc + (r.precioTotal || 0), 0);

      const reservasPorMes = new Array(12).fill(0);
      const reservasCountPorCaba침a = {};
      const metodosPagoCount = {};

      caba침asData.cabins.forEach(c => { reservasCountPorCaba침a[c._id] = 0 });

      reservasFiltradas.forEach(reserva => {
        const fecha = new Date(reserva.fechaInicio);
        reservasPorMes[fecha.getMonth()]++;
        
        if (reserva.cabaniaId && reservasCountPorCaba침a[reserva.cabaniaId._id] !== undefined) {
          reservasCountPorCaba침a[reserva.cabaniaId._id]++;
        }

        if (reserva.metodoPago) {
          metodosPagoCount[reserva.metodoPago] = (metodosPagoCount[reserva.metodoPago] || 0) + 1;
        }
      });

      const reservasPorCaba침aData = caba침asData.cabins.map(c => reservasCountPorCaba침a[c._id]);
      setReservasPorCaba침a(reservasPorCaba침aData);
      setMetodosPago(metodosPagoCount);
      setEstadisticas({ caba침asDisponibles, reservasTotales, ingresosTotales });
      setReservasMensuales(reservasPorMes);
    };

    obtenerDatos();
  }, [a침oSeleccionado]);

  const handleA침oChange = (e) => setA침oSeleccionado(parseInt(e.target.value));

  const dataReservasMensuales = {
    labels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
    datasets: [{
      label: 'Reservas',
      data: reservasMensuales,
      borderColor: '#36A2EB',
      backgroundColor: 'rgba(54,162,235,0.2)',
      tension: 0.3,
    }],
  };

  const dataReservasPorCaba침a = {
    labels: caba침as.map(c => c.nombre),
    datasets: [{
      data: reservasPorCaba침a,
      backgroundColor: ['#4BC0C0', '#FF9F40', '#9966FF', '#36A2EB', '#FF6384', '#FFCE56'],
      borderColor: '#fff',
    }],
  };

  const dataMetodosPago = {
    labels: Object.keys(metodosPago),
    datasets: [{
      data: Object.values(metodosPago),
      backgroundColor: ['#36A2EB', '#4BC0C0', '#9966FF', '#FF6384', '#FFCE56'],
    }],
  };

  const opcionesGrafico = {
    maintainAspectRatio: false,
    plugins: { legend: { position: 'bottom' } },
  };

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-800">游늵 Dashboard</h1>
          <p className="text-gray-600">Resumen general de reservas y caba침as</p>
        </div>
        <div className="mt-3 sm:mt-0">
          <label className="mr-2 font-semibold">A침o:</label>
          <select
            value={a침oSeleccionado}
            onChange={handleA침oChange}
            className="border border-gray-300 rounded-lg p-2 bg-white text-gray-800 shadow-sm focus:ring-2 focus:ring-lime-500"
          >
            {a침osDisponibles.map(a침o => (
              <option key={a침o} value={a침o}>{a침o}</option>
            ))}
          </select>
        </div>
      </div>

      {/* KPIs */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white p-4 rounded-lg shadow text-center">
          <h3 className="text-gray-600">Caba침as Disponibles</h3>
          <p className="text-3xl font-bold text-lime-600">{estadisticas.caba침asDisponibles}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow text-center">
          <h3 className="text-gray-600">Caba침as Ocupadas</h3>
          <p className="text-3xl font-bold text-red-500">{caba침as.length - estadisticas.caba침asDisponibles}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow text-center">
          <h3 className="text-gray-600">Reservas Totales</h3>
          <p className="text-3xl font-bold text-blue-500">{estadisticas.reservasTotales}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow text-center">
          <h3 className="text-gray-600">Ingresos Estimados</h3>
          <p className="text-3xl font-bold text-amber-600">${estadisticas.ingresosTotales.toLocaleString()}</p>
        </div>
      </div>

      {/* Gr치fico principal */}
      <div className="bg-white rounded-lg shadow p-4 mb-8">
        <h3 className="text-xl font-semibold mb-4">Reservas Mensuales</h3>
        <div style={{ height: '300px' }}>
          <Line data={dataReservasMensuales} options={opcionesGrafico} />
        </div>
      </div>

      {/* Gr치ficos secundarios */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow p-4">
          <h3 className="text-xl font-semibold text-center mb-4">Reservas por Caba침a</h3>
          <div style={{ height: '300px' }}>
            {caba침as.length > 0 && reservasPorCaba침a.length > 0
              ? <Pie data={dataReservasPorCaba침a} options={opcionesGrafico} />
              : <p className="text-center text-gray-500">Cargando datos...</p>}
          </div>
        </div>
        <div className="bg-white rounded-lg shadow p-4">
          <h3 className="text-xl font-semibold text-center mb-4">M칠todos de Pago</h3>
          <div style={{ height: '300px' }}>
            {Object.keys(metodosPago).length > 0
              ? <Pie data={dataMetodosPago} options={opcionesGrafico} />
              : <p className="text-center text-gray-500">Cargando datos...</p>}
          </div>
        </div>
      </div>
    </div>
  );
};
